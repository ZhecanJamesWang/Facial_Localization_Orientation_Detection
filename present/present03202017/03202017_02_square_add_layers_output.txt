03202017_02_square_add_layers_output

    img_input = Input(shape=input_shape)    
    x = Convolution2D(16, 4, 4, activation='relu', border_mode='same', name='block1_conv1')(img_input)
    x = Convolution2D(16, 4, 4, activation='relu', border_mode='same', name='block1_conv2')(img_input)
    x = MaxPooling2D((2, 2), strides=(2, 2), name='block1_pool')(x)

    # Block 2
    x = Convolution2D(32, 4, 4, activation='relu', border_mode='same', name='block2_conv1')(x)
    x = Convolution2D(32, 4, 4, activation='relu', border_mode='same', name='block2_conv2')(x)    
    x = MaxPooling2D((2, 2), strides=(2, 2), name='block2_pool')(x)

    # Block 3
    x = Convolution2D(48, 3, 3, activation='relu', border_mode='same', name='block3_conv1')(x)
    x = Convolution2D(48, 3, 3, activation='relu', border_mode='same', name='block3_conv2')(x)    
    x = Convolution2D(48, 3, 3, activation='relu', border_mode='same', name='block3_conv3')(x)    
    x = MaxPooling2D((2, 2), strides=(2, 2), name='block3_pool')(x)

    # Block 4
    x = Convolution2D(64, 3, 3, activation='relu', border_mode='same', name='block4_conv1')(x)
    x = Convolution2D(64, 3, 3, activation='relu', border_mode='same', name='block4_conv2')(x)
    x = Convolution2D(64, 3, 3, activation='relu', border_mode='same', name='block4_conv3')(x)  
    x = MaxPooling2D((2, 2), strides=(2, 2), name='block4_pool')(x)

    # Block 5
    x = Convolution2D(64, 3, 3, activation='relu', border_mode='same', name='block5_conv1')(x)
    x = Convolution2D(64, 3, 3, activation='relu', border_mode='same', name='block5_conv2')(x)
    x = Convolution2D(64, 3, 3, activation='relu', border_mode='same', name='block5_conv3')(x)  
    x = MaxPooling2D((2, 2), strides=(2, 2), name='block5pool')(x)

    x = Flatten(name='flatten')(x)
    x = Dense(512, activation='relu', name='fc1')(x)
    x = Dropout(0.2,name='fc1_drop')(x)
    x = Dense(256, activation='relu', name='fc2')(x)
    x = Dropout(0.2,name='fc2_drop')(x)
    x = Dense(3, activation = 'linear', name='predLabel')(x)







        sgd = optimizers.SGD(lr=0.001, decay=1e-6, momentum=0.9)
        self.model.compile(loss='mean_squared_error', optimizer=sgd, metrics=['accuracy', self.final_pred])
        self.model.summary()
        self.train_on_batch(1, MaxIters = 20000)

        sgd = optimizers.SGD(lr=0.0001, decay=1e-6, momentum=0.9)
        self.model.compile(loss='mean_squared_error', optimizer=sgd, metrics=['accuracy', self.final_pred])
        self.model.summary()
        self.train_on_batch(1, MaxIters = 20000)

        sgd = optimizers.SGD(lr=0.00001, decay=1e-6, momentum=0.9)
        self.model.compile(loss='mean_squared_error', optimizer=sgd, metrics=['accuracy', self.final_pred])
        self.model.summary()
        self.train_on_batch(1, MaxIters = 20000)

        sgd = optimizers.SGD(lr=0.000001, decay=1e-6, momentum=0.9)
        self.model.compile(loss='mean_squared_error', optimizer=sgd, metrics=['accuracy', self.final_pred])
        self.model.summary()
        self.train_on_batch(1, MaxIters = 20000)

        sgd = optimizers.SGD(lr=0.0000001, decay=1e-6, momentum=0.9)
        self.model.compile(loss='mean_squared_error', optimizer=sgd, metrics=['accuracy', self.final_pred])
        self.model.summary()
        self.train_on_batch(1, MaxIters = 20000)